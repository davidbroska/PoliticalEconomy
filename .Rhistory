mapping = aes(xmin = xmin, xmax = xmax,
ymin = ymin, ymax = ymax)),
geom_text(inherit.aes = F,
aes(x = xmin + (xmax - xmin) / 2, y = ymin),
label = "Major Events of Arab Spring",
angle = 90, vjust = 0.36, size = 3.1, hjust = -0.5,
data = plot_coordinates,
alpha = 0.7),
scale_x_date(limits = c(min(more1_observation$Year),
max(more1_observation$Year)),
labels = scales::date_format("%Y"),
breaks = '2 years'),
scale_colour_manual(values = setNames(as.character(arab_countries$colours),
arab_countries$countries)),
xlab("Year"),
ylab(unique(.dataframe$Series_Name)),
labs(color = "Country", shape = "Outcome"),
theme_minimal()
)
plot <- ggplot(more1_observation,
aes_string(x = "Year", y = names(.dataframe[value_col]),
color = "Country_Name",
shape = "Overall_Consequences")) +
geom_point(size = 1.5) +
geom_line() +
aesthetic_layers
return(plot)
}
outcomes_df <- readRDS('../gsheet_outcomes_2018-11-11.rds') %>%
filter(!is.na(Overall_Consequences))
# wikipedia data on major events of the Arab Spring
timeline <- readRDS("../wiki_fr_timeline2018-11-08.rds") %>%
rename(Date = X1, Event = X2) %>%
mutate(Date = lubridate::dmy(Date, locale = "fr_FR"),
Event = Event %>% str_remove('Début d[ue] (l[ae])?'))
# load world bank data
wb_data <- list.dirs(path = "../WorldBankData", full.names = T) %>%
list.files(full.names = T, pattern = "Data.csv") %>%
map_df(~ read_csv(.) %>% tidy_worldbank_data())
knitr::include_graphics("../Figures/bpb_arabischer_fruehling.jpg")
timeline %>% knitr::kable(caption = "Event Timeline")
details_gi <- read_csv("../WorldBankData/world_bank_gini/Definition and Source.csv")
wb_data %>%
filter(Series_Name == "GINI index (World Bank estimate)") %>%
plot_worldbank_data(outcomes_df)
# prepare dataframe to plot
more1_observation <- .dataframe %>%
# join details countries that correspond to the countries in manually collected data
#inner_join(.outcomes_df %>% select(- Country_Name), by = "Country_Code") %>%
filter(str_detect(Country_Name, paste0(arab_countries$countries, collapse = "|")),
!is.na(.dataframe[value_col])) %>%
left_join(.outcomes_df , by = "Country_Code")
# prepare dataframe to plot
more1_observation <- .dataframe %>%
# join details countries that correspond to the countries in manually collected data
#inner_join(.outcomes_df %>% select(- Country_Name), by = "Country_Code") %>%
filter(str_detect(Country_Name, paste0(country_names, collapse = "|")),
!is.na(.dataframe[value_col])) %>%
left_join(.outcomes_df , by = "Country_Code")
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
# install.packages("tidyverse")
# install.packages("rvest") # will also install required package xml2
# install.packages("lubridate")
# install.packages("wesanderson")
library(tidyverse); library(lubridate); library(wesanderson)
tidy_worldbank_data <- function(.dataframe){
df <- .dataframe %>%
rename_all(~ str_replace(., ' ', '_') %>% str_remove('[0-9]{4}_\\[YR') %>% str_remove('\\]$')) %>%
mutate(Country_Name = Country_Name %>% str_remove("(n )?(, )?(Arab )?Rep.(blic)?")) %>%
select(Country_Name, Country_Code, Series_Name, matches('[0-9]{4}')) %>%
na_if('..') %>%
mutate_at(vars(matches('[0-9]{4}')), as.numeric) %>%
gather(Year, value, - Country_Name, - Country_Code, - Series_Name) %>%
mutate(Year = paste(Year, "-01-01") %>% lubridate::ymd())
return(df)
}
plot_worldbank_data <- function(.dataframe, .outcomes_df){
country_names <- .outcomes_df %>% pull(Country_Name)
arab_countries <- data_frame(
# countries mentioned in the context of arab spring
countries = country_names,
# define costum colors for plot and rearrange their order of appearance
colours =  c(wes_palette("Darjeeling1")[c(1,2,4,5)],
wes_palette("Darjeeling2")[1:4],
wes_palette("Darjeeling1")[c(3,5)],
wes_palette("IsleofDogs2")[3],
wes_palette("IsleofDogs1")[1],
wes_palette("Cavalcanti1")[4],
wes_palette("FantasticFox1")[c(2,5)],
wes_palette("Moonrise3")[c(2,4)],
wes_palette("GrandBudapest1")[2]
)[1:length(country_names)]
)
# with gather() the last column contains the value
value_col <- ncol(.dataframe)
# prepare dataframe to plot
# join details countries that correspond to the countries in manually collected data
more1_observation <- .dataframe %>%
filter(str_detect(Country_Name, paste0(country_names, collapse = "|")),
!is.na(.dataframe[value_col])) %>%
left_join(.outcomes_df , by = "Country_Code")
# define x and y coordinates of plot according to the time of the event
plot_coordinates <- data_frame(
xmin = min(timeline$Date),
xmax = max(timeline$Date),
ymin = min(more1_observation[value_col], na.rm = T),
ymax = max(more1_observation[value_col], na.rm = T)
)
# indicate area of major events of arab spring in plot
aesthetic_layers <- list(
geom_rect(inherit.aes = F,
data = plot_coordinates,
fill = "red",
alpha = 0.2,
mapping = aes(xmin = xmin, xmax = xmax,
ymin = ymin, ymax = ymax)),
geom_text(inherit.aes = F,
aes(x = xmin + (xmax - xmin) / 2, y = ymin),
label = "Major Events of Arab Spring",
angle = 90, vjust = 0.36, size = 3.1, hjust = -0.5,
data = plot_coordinates,
alpha = 0.7),
scale_x_date(limits = c(min(more1_observation$Year),
max(more1_observation$Year)),
labels = scales::date_format("%Y"),
breaks = '2 years'),
scale_colour_manual(values = setNames(as.character(arab_countries$colours),
arab_countries$countries)),
xlab("Year"),
ylab(unique(.dataframe$Series_Name)),
labs(color = "Country", shape = "Outcome"),
theme_minimal()
)
plot <- ggplot(more1_observation,
aes_string(x = "Year", y = names(.dataframe[value_col]),
color = "Country_Name",
shape = "Overall_Consequences")) +
geom_point(size = 1.5) +
geom_line() +
aesthetic_layers
return(plot)
}
outcomes_df <- readRDS('../gsheet_outcomes_2018-11-11.rds') %>%
filter(!is.na(Overall_Consequences))
# wikipedia data on major events of the Arab Spring
timeline <- readRDS("../wiki_fr_timeline2018-11-08.rds") %>%
rename(Date = X1, Event = X2) %>%
mutate(Date = lubridate::dmy(Date, locale = "fr_FR"),
Event = Event %>% str_remove('Début d[ue] (l[ae])?'))
# load world bank data
wb_data <- list.dirs(path = "../WorldBankData", full.names = T) %>%
list.files(full.names = T, pattern = "Data.csv") %>%
map_df(~ read_csv(.) %>% tidy_worldbank_data())
knitr::include_graphics("../Figures/bpb_arabischer_fruehling.jpg")
timeline %>% knitr::kable(caption = "Event Timeline")
details_gi <- read_csv("../WorldBankData/world_bank_gini/Definition and Source.csv")
wb_data %>%
filter(Series_Name == "GINI index (World Bank estimate)") %>%
plot_worldbank_data(outcomes_df)
country_names <- .outcomes_df %>% pull(Country_Name)
arab_countries <- data_frame(
# countries mentioned in the context of arab spring
countries = country_names,
# define costum colors for plot and rearrange their order of appearance
colours =  c(wes_palette("Darjeeling1")[c(1,2,4,5)],
wes_palette("Darjeeling2")[1:4],
wes_palette("Darjeeling1")[c(3,5)],
wes_palette("IsleofDogs2")[3],
wes_palette("IsleofDogs1")[1],
wes_palette("Cavalcanti1")[4],
wes_palette("FantasticFox1")[c(2,5)],
wes_palette("Moonrise3")[c(2,4)],
wes_palette("GrandBudapest1")[2]
)[1:length(country_names)]
)
# with gather() the last column contains the value
value_col <- ncol(.dataframe)
# prepare dataframe to plot
# join details countries that correspond to the countries in manually collected data
more1_observation <- .dataframe %>%
filter(str_detect(Country_Name, paste0(country_names, collapse = "|")),
!is.na(.dataframe[value_col])) %>%
left_join(.outcomes_df , by = "Country_Code")
# define x and y coordinates of plot according to the time of the event
plot_coordinates <- data_frame(
xmin = min(timeline$Date),
xmax = max(timeline$Date),
ymin = min(more1_observation[value_col], na.rm = T),
ymax = max(more1_observation[value_col], na.rm = T)
)
# indicate area of major events of arab spring in plot
aesthetic_layers <- list(
geom_rect(inherit.aes = F,
data = plot_coordinates,
fill = "red",
alpha = 0.2,
mapping = aes(xmin = xmin, xmax = xmax,
ymin = ymin, ymax = ymax)),
geom_text(inherit.aes = F,
aes(x = xmin + (xmax - xmin) / 2, y = ymin),
label = "Major Events of Arab Spring",
angle = 90, vjust = 0.36, size = 3.1, hjust = -0.5,
data = plot_coordinates,
alpha = 0.7),
scale_x_date(limits = c(min(more1_observation$Year),
max(more1_observation$Year)),
labels = scales::date_format("%Y"),
breaks = '2 years'),
scale_colour_manual(values = setNames(as.character(arab_countries$colours),
arab_countries$countries)),
xlab("Year"),
ylab(unique(.dataframe$Series_Name)),
labs(color = "Country", shape = "Outcome"),
theme_minimal()
)
plot <- ggplot(more1_observation,
aes_string(x = "Year", y = names(.dataframe[value_col]),
color = "Country_Name",
shape = "Overall_Consequences")) +
geom_point(size = 1.5) +
geom_line() +
aesthetic_layers
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
# install.packages("tidyverse")
# install.packages("rvest") # will also install required package xml2
# install.packages("lubridate")
# install.packages("wesanderson")
library(tidyverse); library(lubridate); library(wesanderson)
tidy_worldbank_data <- function(.dataframe){
df <- .dataframe %>%
rename_all(~ str_replace(., ' ', '_') %>% str_remove('[0-9]{4}_\\[YR') %>% str_remove('\\]$')) %>%
mutate(Country_Name = Country_Name %>% str_remove("(n )?(, )?(Arab )?Rep.(blic)?")) %>%
select(Country_Name, Country_Code, Series_Name, matches('[0-9]{4}')) %>%
na_if('..') %>%
mutate_at(vars(matches('[0-9]{4}')), as.numeric) %>%
gather(Year, value, - Country_Name, - Country_Code, - Series_Name) %>%
mutate(Year = paste(Year, "-01-01") %>% lubridate::ymd())
return(df)
}
plot_worldbank_data <- function(.dataframe, .outcomes_df){
country_names <- .outcomes_df %>% pull(Country_Name)
arab_countries <- data_frame(
# countries mentioned in the context of arab spring
countries = country_names,
# define costum colors for plot and rearrange their order of appearance
colours =  c(wes_palette("Darjeeling1")[c(1,2,4,5)],
wes_palette("Darjeeling2")[1:4],
wes_palette("Darjeeling1")[c(3,5)],
wes_palette("IsleofDogs2")[3],
wes_palette("IsleofDogs1")[1],
wes_palette("Cavalcanti1")[4],
wes_palette("FantasticFox1")[c(2,5)],
wes_palette("Moonrise3")[c(2,4)],
wes_palette("GrandBudapest1")[2]
)[1:length(country_names)]
)
# with gather() the last column contains the value
value_col <- ncol(.dataframe)
# prepare dataframe to plot
# join details countries that correspond to the countries in manually collected data
more1_observation <- .dataframe %>%
filter(str_detect(Country_Name, paste0(country_names, collapse = "|")),
!is.na(.dataframe[value_col])) %>%
left_join(.outcomes_df %>% select(-Country_Name) , by = "Country_Code")
# define x and y coordinates of plot according to the time of the event
plot_coordinates <- data_frame(
xmin = min(timeline$Date),
xmax = max(timeline$Date),
ymin = min(more1_observation[value_col], na.rm = T),
ymax = max(more1_observation[value_col], na.rm = T)
)
# indicate area of major events of arab spring in plot
aesthetic_layers <- list(
geom_rect(inherit.aes = F,
data = plot_coordinates,
fill = "red",
alpha = 0.2,
mapping = aes(xmin = xmin, xmax = xmax,
ymin = ymin, ymax = ymax)),
geom_text(inherit.aes = F,
aes(x = xmin + (xmax - xmin) / 2, y = ymin),
label = "Major Events of Arab Spring",
angle = 90, vjust = 0.36, size = 3.1, hjust = -0.5,
data = plot_coordinates,
alpha = 0.7),
scale_x_date(limits = c(min(more1_observation$Year),
max(more1_observation$Year)),
labels = scales::date_format("%Y"),
breaks = '2 years'),
scale_colour_manual(values = setNames(as.character(arab_countries$colours),
arab_countries$countries)),
xlab("Year"),
ylab(unique(.dataframe$Series_Name)),
labs(color = "Country", shape = "Outcome"),
theme_minimal()
)
plot <- ggplot(more1_observation,
aes_string(x = "Year", y = names(.dataframe[value_col]),
color = "Country_Name",
shape = "Overall_Consequences")) +
geom_point(size = 1.5) +
geom_line() +
aesthetic_layers
return(plot)
}
outcomes_df <- readRDS('../gsheet_outcomes_2018-11-11.rds') %>%
filter(!is.na(Overall_Consequences))
# wikipedia data on major events of the Arab Spring
timeline <- readRDS("../wiki_fr_timeline2018-11-08.rds") %>%
rename(Date = X1, Event = X2) %>%
mutate(Date = lubridate::dmy(Date, locale = "fr_FR"),
Event = Event %>% str_remove('Début d[ue] (l[ae])?'))
# load world bank data
wb_data <- list.dirs(path = "../WorldBankData", full.names = T) %>%
list.files(full.names = T, pattern = "Data.csv") %>%
map_df(~ read_csv(.) %>% tidy_worldbank_data())
knitr::include_graphics("../Figures/bpb_arabischer_fruehling.jpg")
details_gi <- read_csv("../WorldBankData/world_bank_gini/Definition and Source.csv")
wb_data %>%
filter(Series_Name == "GINI index (World Bank estimate)") %>%
plot_worldbank_data(outcomes_df)
details_toit <- read_csv("../WorldBankData/Taxes_on_international_trade_percent_of_revenue/Definition and Source.csv")
wb_data %>%
filter(Series_Name == "Taxes on international trade (% of revenue)") %>%
plot_worldbank_data(outcomes_df)
details_caoid <- read_csv("../WorldBankData/Costums_and_other_import_duties_percent_of_tax_revenue/Definition and Source.csv")
wb_data %>%
filter(Series_Name == "Customs and other import duties (% of tax revenue)") %>%
plot_worldbank_data(outcomes_df)
details_yu <- read_csv("../WorldBankData/Youth_unemployment_percent_youth_population/Definition and Source.csv")
wb_data %>%
filter(Series_Name == "Share of youth not in education, employment or training, total (% of youth population)") %>%
plot_worldbank_data(outcomes_df) +
ylab("Youth unemployment (% of youth population)")
details_ut <- read_csv("../WorldBankData/Unemployment_percent_of_total_labor_force/Definition and Source.csv")
wb_data %>%
filter(Series_Name == "Unemployment, total (% of total labor force) (modeled ILO estimate)") %>%
plot_worldbank_data(outcomes_df) +
ylab("Unemployment, total (% of total labor force)")
wb_data %>%
filter(Series_Name == "Unemployment, total (% of total labor force) (modeled ILO estimate)") %>%
group_by(Country_Code) %>%
summarise(sd())
wb_data %>%
filter(Series_Name == "Unemployment, total (% of total labor force) (modeled ILO estimate)") %>%
group_by(Country_Code) %>%
summarise(sd(value))
wb_data %>%
filter(Series_Name == "Unemployment, total (% of total labor force) (modeled ILO estimate)") %>%
group_by(Country_Code) %>%
summarise(sd(value, na.rm = T))
wb_data %>%
filter(Series_Name == "Unemployment, total (% of total labor force) (modeled ILO estimate)") %>%
group_by(Country_Code) %>%
summarise(sd = sd(value, na.rm = T)) %>%
filter(sd > 0.1)
no_change_over_time <- wb_data %>%
filter(Series_Name == "Unemployment, total (% of total labor force) (modeled ILO estimate)") %>%
group_by(Country_Code) %>%
summarise(sd = sd(value, na.rm = T)) %>%
filter(sd < 0.2)
wb_data %>%
filter(Series_Name == "Unemployment, total (% of total labor force) (modeled ILO estimate)") %>%
anti_join(no_change_over_time, by = "Country_Code") %>%
plot_worldbank_data(outcomes_df) +
ylab("Unemployment, total (% of total labor force)")
no_change_over_time <- wb_data %>%
filter(Series_Name == "Unemployment, total (% of total labor force) (modeled ILO estimate)") %>%
group_by(Country_Code) %>%
summarise(sd = sd(value, na.rm = T)) %>%
filter(sd < 0.3)
wb_data %>%
filter(Series_Name == "Unemployment, total (% of total labor force) (modeled ILO estimate)") %>%
anti_join(no_change_over_time, by = "Country_Code") %>%
plot_worldbank_data(outcomes_df) +
ylab("Unemployment, total (% of total labor force)")
wes_palette("Darjeeling1")
wes_palette("Darjeeling2")
wes_palette("Darjeeling2")
wes_palette("IsleofDogs2")
wes_palette("Darjeeling1")
wes_palette("Darjeeling2")
wes_palette("Darjeeling2")
wes_palette("Darjeeling1")
wes_palette("Darjeeling2")[1:4]
wes_palette("Darjeeling2")
wes_palette("Darjeeling2")
wes_palette("Darjeeling1")
wes_palette("Darjeeling1")
wes_palette("Darjeeling2")
wes_palette("FantasticFox1")
wes_palette("GrandBudapest1")
wes_palette("Moonrise3")
wes_palette("FantasticFox1")
wes_palette("Cavalcanti1")
details_ut <- read_csv("../WorldBankData/Unemployment_percent_of_total_labor_force/Definition and Source.csv")
no_change_over_time <- wb_data %>%
filter(Series_Name == "Unemployment, total (% of total labor force) (modeled ILO estimate)") %>%
group_by(Country_Code) %>%
summarise(sd = sd(value, na.rm = T)) %>%
filter(sd < 0.3)
wb_data %>%
filter(Series_Name == "Unemployment, total (% of total labor force) (modeled ILO estimate)") %>%
#anti_join(no_change_over_time, by = "Country_Code") %>%
plot_worldbank_data(outcomes_df) +
ylab("Unemployment, total (% of total labor force)")
no_change_over_time <- wb_data %>%
filter(Series_Name == "Unemployment, total (% of total labor force) (modeled ILO estimate)") %>%
group_by(Country_Code) %>%
summarise(sd = sd(value, na.rm = T),
mean(value, na.rm = T)) %>%
filter(sd < 0.3)
View(no_change_over_time)
details_ut <- read_csv("../WorldBankData/Unemployment_percent_of_total_labor_force/Definition and Source.csv")
no_change_over_time <- wb_data %>%
filter(Series_Name == "Unemployment, total (% of total labor force) (modeled ILO estimate)") %>%
group_by(Country_Code) %>%
summarise(sd = sd(value, na.rm = T),
mean = mean(value, na.rm = T)) %>%
filter(
#sd < 0.3,
mean > 1
)
wb_data %>%
filter(Series_Name == "Unemployment, total (% of total labor force) (modeled ILO estimate)") %>%
anti_join(no_change_over_time, by = "Country_Code") %>%
plot_worldbank_data(outcomes_df) +
ylab("Unemployment, total (% of total labor force)")
no_change_over_time <- wb_data %>%
filter(Series_Name == "Unemployment, total (% of total labor force) (modeled ILO estimate)") %>%
group_by(Country_Code) %>%
summarise(sd = sd(value, na.rm = T),
mean = mean(value, na.rm = T))
View(no_change_over_time)
no_change_over_time <- wb_data %>%
filter(Series_Name == "Unemployment, total (% of total labor force) (modeled ILO estimate)",
!is.na(value)) %>%
group_by(Country_Code) %>%
summarise(sd = sd(value),
mean = mean(value)) %>%
filter(
#sd < 0.3,
mean > 1
)
wb_data %>%
filter(Series_Name == "Unemployment, total (% of total labor force) (modeled ILO estimate)") %>%
anti_join(no_change_over_time, by = "Country_Code") %>%
plot_worldbank_data(outcomes_df) +
ylab("Unemployment, total (% of total labor force)")
View(no_change_over_time)
wb_data %>%
filter(Series_Name == "Unemployment, total (% of total labor force) (modeled ILO estimate)") %>%
anti_join(no_change_over_time, by = "Country_Code") %>%
plot_worldbank_data(outcomes_df) +
ylab("Unemployment, total (% of total labor force)")
wb_data %>%
filter(Series_Name == "Unemployment, total (% of total labor force) (modeled ILO estimate)") %>%
anti_join(no_change_over_time, by = "Country_Code")
details_toipacg <- read_csv("../WorldBankData/Taxes_on_income_profits_and_capital_gains_percent_of_revenue/Definition and Source.csv")
wb_data %>%
filter(Series_Name == "Taxes on income, profits and capital gains (% of revenue)") %>%
plot_worldbank_data(outcomes_df)
details_ut <- read_csv("../WorldBankData/Unemployment_percent_of_total_labor_force/Definition and Source.csv")
no_change_over_time <- wb_data %>%
filter(Series_Name == "Unemployment, total (% of total labor force) (modeled ILO estimate)",
!is.na(value)) %>%
group_by(Country_Code) %>%
summarise(sd = sd(value),
mean = mean(value)) %>%
filter(
#sd < 0.3,
mean > 0.8
)
wb_data %>%
filter(Series_Name == "Unemployment, total (% of total labor force) (modeled ILO estimate)") %>%
anti_join(no_change_over_time, by = "Country_Code") %>%
plot_worldbank_data(outcomes_df) +
ylab("Unemployment, total (% of total labor force)")
details_ut <- read_csv("../WorldBankData/Unemployment_percent_of_total_labor_force/Definition and Source.csv")
no_change_over_time <- wb_data %>%
filter(Series_Name == "Unemployment, total (% of total labor force) (modeled ILO estimate)",
!is.na(value)) %>%
group_by(Country_Code) %>%
summarise(sd = sd(value),
mean = mean(value)) %>%
filter(
sd < 0.3,
#mean > 0.8
)
wb_data %>%
filter(Series_Name == "Unemployment, total (% of total labor force) (modeled ILO estimate)") %>%
anti_join(no_change_over_time, by = "Country_Code") %>%
plot_worldbank_data(outcomes_df) +
ylab("Unemployment, total (% of total labor force)")
details_ut <- read_csv("../WorldBankData/Unemployment_percent_of_total_labor_force/Definition and Source.csv")
no_change_over_time <- wb_data %>%
filter(Series_Name == "Unemployment, total (% of total labor force) (modeled ILO estimate)",
!is.na(value)) %>%
group_by(Country_Code) %>%
summarise(sd = sd(value),
mean = mean(value)) %>%
filter(
sd < 0.3
#mean > 0.8
)
wb_data %>%
filter(Series_Name == "Unemployment, total (% of total labor force) (modeled ILO estimate)") %>%
anti_join(no_change_over_time, by = "Country_Code") %>%
plot_worldbank_data(outcomes_df) +
ylab("Unemployment, total (% of total labor force)")
getwd()
list.files("Figures")
